using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Threading;


// CODE FOR MY BLACKJACK FORM



namespace Big_Project
{
    public partial class myProgram : Form
    {
        public myProgram()
        {
            InitializeComponent();
        }





        // this is the blackjack game form







        // NOTE
        //
        // to prevent a cross thread error that crashes the program an 'Invoke new Action' method is used
        // throughout this program
        // these errors occur when a process tries to send information to another process operating on
        // another thread of execution
        //
        // it looks like this
        //
        //
        //      this.Invoke(new Action(() =>
        //
        //          code i want to run
        //
        //      ));







        // varialbes used in this program


        // this is a string array that contains the symbols used to display the dealers and players cards to the user
        //
        string[] deck = {     "2 ♠", "3 ♠", "4 ♠", "5 ♠", "6 ♠", "7 ♠", "8 ♠", "9 ♠", "10 ♠", "J ♠", "Q ♠", "K ♠", "A ♠", 
                              "2 ♣", "3 ♣", "4 ♣", "5 ♣", "6 ♣", "7 ♣", "8 ♣", "9 ♣", "10 ♣", "J ♣", "Q ♣", "K ♣", "A ♣",
                              "2 ♦", "3 ♦", "4 ♦", "5 ♦", "6 ♦", "7 ♦", "8 ♦", "9 ♦", "10 ♦", "J ♦", "Q ♦", "K ♦", "A ♦",
                              "2 ♥", "3 ♥", "4 ♥", "5 ♥", "6 ♥", "7 ♥", "8 ♥", "9 ♥", "10 ♥", "J ♥", "Q ♥", "K ♥", "A ♥"};

        
        // this is an int array that contains the values of the cards, the number in the array is the value of card at the same
        // position of the deck array
        //
        int[] deckValue = {     2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11, 
                                2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11,
                                2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11,
                                2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11};


        // this bool gets switched to true when the game is started
        bool gameON = false;

        // this bool gets switched to true when the user places his bets
        bool betPlaced = false;

        // this bool gets switched to true when new game is clicked
        bool newGame = false;

        // this bool gets switched to true when the player loses the hand
        bool loseGame = false;

        // this bool gets switched to true when player runs out of miney
        bool broke = false;


        // these ints will hold the number that is used to select a card and value from the deck and value arrays
        int player_card = 0;
        int dealer_card = 0;


        // these ints will hold the total value of the player and dealers hand
        int players_total_hand = 0;
        int dealers_total_hand = 0;


        // this int is the players money amount
        int money = 100;

        // this in is how much the player is betting
        int bet = 0;

        // this in is the amount that is in the pot
        int pot = 0;


        // these ints hold the amount of cards that are in the player and dealers hand
        int dealer_card_amnt = 0;
        int player_card_amnt = 0;


        // this is the random generator object
        Random randy;






        // this form load event declares the random number generator
        //
        private void myProgram_Load(object sender, EventArgs e)
        {
            randy = new Random();
        }










        // this procedure is used to get a card and value of that card for the player
        //
        public void getCard_player()
        {

            // a random number between 0 and 51 is generated by the random number generator
            // and stored in player_card
            player_card = randy.Next(0, 51);


            // the amount of cards that the player has is incremented by 1
            player_card_amnt++;


            
            this.Invoke(new Action(() =>

                // the string value in the deck array at the position of the value in player_card is added to the 
                // players hand textbox
                hand_player.Text += deck[player_card] + "\t"

            ));


            // the int in the deck value array at the position of the value in player_card is added to 
            // the players_total_hand variable 
            players_total_hand += deckValue[player_card];



            this.Invoke(new Action(() =>

                // the label that displays the players total amount has its text changed
                // to the value in players_total_hand
                total_player.Text = players_total_hand.ToString()

            ));
        }






        // this procedure is used to get a card and value of that card for the dealer
        //
        public void getCard_dealer()
        {

            // a random number between 0 and 51 is generated by the random number generator
            // and stored in dealer_card
            dealer_card = randy.Next(0, 51);


            // the amount of cards that the dealer has is incremented by 1
            dealer_card_amnt++;


            this.Invoke(new Action(() =>

                // the string value in the deck array at the position of the value in dealer_card is added to the 
                // dealers hand textbox
                hand_dealer.Text += deck[dealer_card] + "\t"

            ));


            // the int in the deck value array at the position of the value in dealer_card is added to 
            // the dealers_total_hand variable
            dealers_total_hand += deckValue[dealer_card];



            this.Invoke(new Action(() =>

                // the label that displays the dealers total amount has its text changed
                // to the value in dealers_total_hand
                total_dealer.Text = dealers_total_hand.ToString()

            ));

        }











        // this the event triggered by the player pressing new game
        // pressing new game starts a new game where the players money is reset
        // the player is promted to place a bet before the cards are dealt 
        //
        private void newGame_Btn_Click(object sender, EventArgs e)
        {

            // if a hand is already in play then the game on variable will be true and
            // nothing will happen when the user presses new game
            // if no hand is currently in play then the user can start a new game
            if (gameON == false)
            {

                // the amount of cards the player and dealer has is set to 0
                player_card_amnt = 0;
                dealer_card_amnt = 0;

                // the players money is set to 100
                money = 100;


                // the money amount label is set to the amount in the money varialbe
                amnt_wallet.Text = money.ToString();

                // the pot amount label is set to 0
                amnt_pot.Text = "0";


                // this try and catch tries to run the background worker and if it is already running
                // or the background worker fails to run then the program will not crash
                try
                {
                    // this background worker is constantly checking it see if you lose the total game
                    // ie, you run out of money
                    backgroundWorker_checkLose.RunWorkerAsync();
                }
                catch
                {
                    // no catch clause needed
                }



                // the betbox gets cleared
                betbox.Clear();

                // the players hand textbox gets cleared
                hand_player.Clear();

                // the dealers hand textbox gets cleared
                hand_dealer.Clear();

                // the players total hand amount label gets set to 0 
                total_player.Text = "0";

                // the dealers total hand amount label gets set to 0 
                total_dealer.Text = "0";


                // cards and hand totals are set to 0
                player_card = 0;
                players_total_hand = 0;
                dealer_card = 0;
                dealers_total_hand = 0;


                // game bools get reset
                gameON = true;
                newGame = true;
                betPlaced = false;
                broke = false;
                loseGame = false;


                // the text in the dealer_talk textbox gets set
                dealer_talk.Text = "Welcome to the table!  Place your bets...";
            }

        }












        // this event is triggered by the player pressing the Deal button
        // pressing deal starts a new hand, the player is promted to place a bet
        // before the cards are dealt out
        //
        private void deal_btn_Click(object sender, EventArgs e)
        {

            // if the bool variable states do not match the states required by the if statement
            // noting will happen if the user presses deal
            if (gameON == false && newGame == true && broke == false)
            {

                // the amount of cards the player and dealer has is set to 0
                player_card_amnt = 0;
                dealer_card_amnt = 0;



                // the pot amount label is set to 0
                amnt_pot.Text = "0";



                // this try and catch tries to run the background worker and if it is already running
                // or the background worker fails to run then the program will not crash
                try
                {
                    // this background worker is constantly checking it see if you lose the total game
                    // ie, you run out of money
                    backgroundWorker_checkLose.RunWorkerAsync();
                }
                catch
                {
                    // no catch clause needed
                }



                // the betbox gets cleared
                betbox.Clear();

                // the players hand textbox gets cleared
                hand_player.Clear();

                // the dealers hand textbox gets cleared
                hand_dealer.Clear();

                // the players total hand amount label gets set to 0 
                total_player.Text = "0";

                // the dealers total hand amount label gets set to 0 
                total_dealer.Text = "0";


                // cards and hand totals are set to 0
                player_card = 0;
                players_total_hand = 0;
                dealer_card = 0;
                dealers_total_hand = 0;


                // game bools get reset
                gameON = true;
                betPlaced = false;
                loseGame = false;


                // the text in the dealer_talk textbox gets set
                dealer_talk.Text = "Place you bets...";
            }
        }











        // this event is triggered by the player pressing the bet button
        // when a player wants to place a bet, the amount is entered into the textbox
        // beside the bet button and the bet button is then pressed
        //
        private void bet_btn_Click(object sender, EventArgs e)
        {

            // this try and catch tries to run the code inside and if there is nothing
            // entered into the betbox or a non number is entered, the catch statement shows a messagebox with an error 
            // message in it and clears the betbox
            try
            {

                // if the bool variable states do not match the states required by the if statement then nothing will happen 
                // when the users presses the bet button
                // if the user bets 0 or bets more than the amount of money they have nothing will happen
                if (gameON == true && betPlaced == false && (int)Convert.ToInt32(betbox.Text) <= money && (int)Convert.ToInt32(betbox.Text) != 0)
                {

                    // convert the number in the betbox to an int and store in bet
                    // clear the betbox
                    // the pot equals the bet by 2
                    // the bet is taken from the money in the wallet
                    // and the labels are changed accordingly 
                    bet = (int)Convert.ToInt32(betbox.Text);
                    betbox.Clear();
                    pot = bet * 2;
                    money -= bet;
                    amnt_pot.Text = pot.ToString();
                    amnt_wallet.Text = money.ToString();

                    // dealer message is displayed
                    dealer_talk.Text = "The cards are...";


                    // the procedure is called to get a card for the dealer
                    getCard_dealer();


                    // the procedure is called to get 2 cards for the player
                    getCard_player();
                    getCard_player();


                    // the betPlaced bool is set to true
                    betPlaced = true;
                }
            }
            catch
            {
                MessageBox.Show("You have not entered a bet");
                betbox.Clear();
            }
        }











        // this event is triggered if the player presses the hit button
        // if the player hits another card is dealt
        //
        private void hit_btn_Click(object sender, EventArgs e)
        {

            // if the bool variable states do not match the states required by the if statement then nothing will happen 
            // when the users presses the hit button
            // if the bet has not been placed or the game is not on
            if (gameON == true && betPlaced == true)
            {
                // dealer message is displayed
                dealer_talk.Text = "You hit";

                // procedure is called to get a card for the player
                getCard_player();


                // if the players total hand amount is greater than 21 then the player busts, losing the hand and the money in the pot
                if (players_total_hand > 21)
                {
                    // dealer message is displayed
                    dealer_talk.Text = "Player busts!  Press 'Deal' to play again";

                    // pot variable and pot label is set to 0
                    amnt_pot.Text = "0";
                    pot = 0;


                    // game bools are set
                    loseGame = true;
                    gameON = false;
                }
            }
        }











        // this event is triggered when the player presses the stand button
        //
        private void stick_btn_Click(object sender, EventArgs e)
        {
            // if the game is on and the bet has been placed then the background worker
            // to control the dealers go is activated
            if (gameON == true && betPlaced == true)
            {
                backgroundWorker_dealersGo.RunWorkerAsync();
            }
        }












        // this is the background worker thay is triggered when the player presses the stand button
        // inside is a loop that gives the dealer its cards and compares the players and dealers hands 
        //
        private void backgroundWorker_dealersGo_DoWork(object sender, DoWorkEventArgs e)
        {

            // while the game is on this will loop
            // at this point the gameON variable can only be turned off if the dealer busts
            // or reaches its hit limit, then the hands are compared, a winner is declared
            // and the gameON variable is made false and the loop breaks
            while (gameON == true)
            {
                // this sleep creates a 1 second gap between each card deal
                Thread.Sleep(1000);


                dealer_talk.Invoke(new Action(() =>

                    // dealer message is displayed 
                    dealer_talk.Text = "Dealers card is..."

                ));


                // if dealers hand total is greater than 21 then the dealer busts 
                // player wins the hand
                if (dealers_total_hand > 21)
                {
                    // gameON is switched to false
                    gameON = false;

                    // money in the pot is added to the players wallet
                    money += pot;


                    this.Invoke(new Action(() =>

                        // wallet label shows amount of money player now has
                        amnt_wallet.Text = money.ToString()

                    ));



                    this.Invoke(new Action(() =>

                        // dealer message is displayed
                        dealer_talk.Text = "Dealer busts!  Press 'Deal' to play again"

                    ));



                    this.Invoke(new Action(() =>

                        // pot label is set to 0
                        amnt_pot.Text = "0"

                    ));

                    // pot variable is set to 0
                    pot = 0;
                }



                // if dealers hand total is less than 16 then another card is dealt to the dealer
                // else if the dealers total hand is not less than 16 but less than 22
                // stop the game and compare hands
                if (dealers_total_hand < 16)
                {
                    getCard_dealer();
                }
                else if (dealers_total_hand < 22)
                {
                    gameON = false;


                    // by here, both player and dealer are standing, now its time to compare hands
                    this.Invoke(new Action(() =>

                        // dealer message is displayed
                        dealer_talk.Text = "Dealer Stands"

                    ));



                    // if the dealers hand total is greater than the players hand total
                    // dealer wins
                    if (dealers_total_hand > players_total_hand)
                    {
                        
                        this.Invoke(new Action(() =>

                            // dealer message is displayed 
                            dealer_talk.Text = "Dealer wins!  Press 'Deal' to play again" 

                        ));


                        this.Invoke(new Action(() =>

                            // pot label is set to 0
                            amnt_pot.Text = "0"

                        ));

                        // lose game varialbe is set to true (ie, player has lost)
                        loseGame = true;

                        // pot variable is set to 0
                        pot = 0;
                    }


                    // if players hand total is greater than the dealers hand total
                    // player wins
                    if (players_total_hand > dealers_total_hand)
                    {
                       
                        // money in the pot is added to the players total money
                        money += pot;

                        this.Invoke(new Action(() =>

                            // dealer message is displayed
                            dealer_talk.Text = "Player wins!  Press 'Deal' to play again"

                        ));


                        this.Invoke(new Action(() =>

                            // wallet label is set to amount of money
                            amnt_wallet.Text = money.ToString()

                        ));



                        this.Invoke(new Action(() =>

                            // pot label is set to 0
                            amnt_pot.Text = "0"

                        ));

                        // pot variable is set to 0
                        pot = 0;
                    }



                    // if both hands are even the the hand is a draw
                    // now amount of cards in each hand is compared 
                    if (players_total_hand == dealers_total_hand)
                    {

                        // if player has more cards than the dealer
                        // dealer wins
                        if (player_card_amnt > dealer_card_amnt)
                        {

                            
                            this.Invoke(new Action(() =>

                                // dealer message is displayed
                                dealer_talk.Text = "Dealer wins!  Press 'Deal' to play again"

                            ));


                            this.Invoke(new Action(() =>

                                // pot label is set to 0
                                amnt_pot.Text = "0"

                            ));

                            // lose game variable is set to true
                            loseGame = true;

                            // pot variable is set to 0
                            pot = 0;
                        }



                        // if dealer has more cards than the player
                        // player wins
                        if (dealer_card_amnt > player_card_amnt)
                        {

                            // money in the pot is added to the players total money
                            money += pot;

                            this.Invoke(new Action(() =>

                                // dealer message is displayed
                                dealer_talk.Text = "Player wins!  Press 'Deal' to play again"

                            ));


                            this.Invoke(new Action(() =>

                                // wallet label is set to money amount
                                amnt_wallet.Text = money.ToString()

                            ));



                            this.Invoke(new Action(() =>

                                // pot label is set to 0
                                amnt_pot.Text = "0"

                            ));

                            // pot variable is set to 0
                            pot = 0;
                        }



                        // if card amounts are even then the hand is a draw
                        // player gets bet amount back
                        if (dealer_card_amnt == player_card_amnt)
                        {

                            // bet amount is added to total money
                            money += bet;

                            this.Invoke(new Action(() =>

                                // dealer message is displayed 
                                dealer_talk.Text = "Draw!  Press 'Deal' to play again"

                            ));



                            this.Invoke(new Action(() =>

                                // wallet label is set to total money 
                               amnt_wallet.Text = money.ToString()

                           ));



                            this.Invoke(new Action(() =>

                                // pot label is set to 0
                                amnt_pot.Text = "0"

                            ));

                            // pot variable is set to 0
                            pot = 0;
                        }

                    }
                }
            }
        }







        // this background worker is constantly checking it see if you lose the total game
        // ie, you run out of money
        //
        private void backgroundWorker_checkLose_DoWork(object sender, DoWorkEventArgs e)
        {
            // while broke is false this loop will run
            while (broke == false)
            {
                // if you are on 0 money and you lose a hand then you lose the game and you are broke
                if (money == 0 && loseGame == true)
                {

                    // game is off and you are broke
                    gameON = false;
                    broke = true;


                    this.Invoke(new Action(() =>

                        // dealer message is displayed
                         dealer_talk.Text = "You are broke!  Press 'New game' to play again"

                    ));

                }
            }
        }




   


        // this event closes the form when file/exit is clicked
        //
        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            gameON = false;
            this.Close();
        }





















        // events not used anymore
        private void backgroundWorker_checkLoop_DoWork(object sender, DoWorkEventArgs e)
        {
            // not needed anymore
        }

        private void newGameToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // not used anymore
        }

        


        









    }
}
